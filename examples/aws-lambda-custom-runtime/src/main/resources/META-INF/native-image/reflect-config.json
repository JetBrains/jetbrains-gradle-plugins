[
    {
      "name": "android.os.Build$VERSION"
    },
  {
    "name": "ch.qos.logback.classic.BasicConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.joran.SerializedModelConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.util.DefaultJoranConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
        ]
      }
    ]
  },
  {
    "name": "com.github.lamba92.aws.lambda.runtime.ErrorResponse",
    "fields": [
      {
        "name": "Companion"
      }
    ]
  },
  {
    "name": "com.github.lamba92.aws.lambda.runtime.ErrorResponse$Companion",
    "methods": [
      {
        "name": "serializer",
        "parameterTypes": [
        ]
      }
    ]
  },
  {
    "name": "io.ktor.client.HttpClient",
    "fields": [
      {
        "name": "closed"
      }
    ]
  },
  {
    "name": "io.ktor.client.call.HttpClientCall",
    "fields": [
      {
        "name": "received"
      }
    ]
  },
  {
    "name": "io.ktor.client.engine.HttpClientEngineBase",
    "fields": [
      {
        "name": "closed"
      }
    ]
  },
  {
    "name": "io.ktor.client.engine.cio.Endpoint",
    "fields": [
      {
        "name": "connections"
      }
    ]
  },
  {
    "name": "io.ktor.client.plugins.logging.HttpClientCallLogger",
    "fields": [
      {
        "name": "requestLogged"
      },
      {
        "name": "responseLogged"
      }
    ]
  },
  {
    "name": "io.ktor.network.selector.InterestSuspensionsMap",
    "fields": [
      {
        "name": "acceptHandlerReference"
      },
      {
        "name": "connectHandlerReference"
      },
      {
        "name": "readHandlerReference"
      },
      {
        "name": "writeHandlerReference"
      }
    ],
    "allDeclaredMethods": true,
    "allDeclaredFields": true,
    "allDeclaredConstructors": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queryAllPublicMethods": true,
    "queryAllPublicConstructors": true
  },
  {
    "name": "io.ktor.network.selector.LockFreeMPSCQueue",
    "fields": [
      {
        "name": "_cur"
      }
    ]
  },
  {
    "name": "io.ktor.network.selector.LockFreeMPSCQueueCore",
    "fields": [
      {
        "name": "_next"
      },
      {
        "name": "_state"
      }
    ]
  },
  {
    "name": "io.ktor.network.selector.SelectableBase",
    "fields": [
      {
        "name": "_interestedOps"
      }
    ]
  },
  {
    "name": "io.ktor.util.collections.CopyOnWriteHashMap",
    "fields": [
      {
        "name": "current"
      }
    ]
  },
  {
    "name": "io.ktor.utils.io.ByteBufferChannel",
    "fields": [
      {
        "name": "_closed"
      },
      {
        "name": "_readOp"
      },
      {
        "name": "_state"
      },
      {
        "name": "_writeOp"
      }
    ]
  },
  {
        "name": "io.ktor.utils.io.ClosedWriteChannelException",
        "methods": [
            {
                "name": "<init>",
                "parameterTypes": [
                    "java.lang.String"
                ]
            }
        ],
        "allDeclaredFields": true,
        "queryAllPublicConstructors": true
    },
    {
      "name": "io.ktor.utils.io.core.internal.ChunkBuffer",
      "fields": [
        {
          "name": "nextRef"
        },
        {
          "name": "refCount"
        }
      ]
    },
  {
    "name": "io.ktor.utils.io.internal.CancellableReusableContinuation",
    "fields": [
      {
        "name": "jobCancellationHandler"
      },
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "io.ktor.utils.io.internal.RingBufferCapacity",
    "fields": [
      {
        "name": "_availableForRead$internal"
      },
      {
        "name": "_availableForWrite$internal"
      },
      {
        "name": "_pendingToFlush"
      }
    ]
  },
  {
    "name": "io.ktor.utils.io.pool.DefaultPool",
    "fields": [
      {
        "name": "top"
      }
    ]
  },
  {
        "name": "java.io.FilePermission"
    },
    {
        "name": "java.lang.Exception",
        "allDeclaredFields": true
    },
    {
        "name": "java.lang.IllegalStateException",
        "allDeclaredFields": true
    },
    {
        "name": "java.lang.Object",
        "allDeclaredFields": true
    },
    {
        "name": "java.lang.RuntimeException",
        "allDeclaredFields": true
    },
    {
        "name": "java.lang.RuntimePermission"
    },
    {
        "name": "java.lang.Throwable",
        "allDeclaredFields": true
    },
    {
        "name": "java.net.NetPermission"
    },
    {
        "name": "java.net.SocketPermission"
    },
    {
        "name": "java.net.StandardSocketOptions"
    },
    {
        "name": "java.net.URLPermission",
        "methods": [
            {
                "name": "<init>",
                "parameterTypes": [
                    "java.lang.String",
                    "java.lang.String"
                ]
            }
        ]
    },
    {
        "name": "java.security.AllPermission"
    },
    {
        "name": "java.security.SecurityPermission"
    },
    {
        "name": "java.util.PropertyPermission"
    },
    {
        "name": "java.util.concurrent.CancellationException",
        "methods": [
            {
                "name": "<init>",
                "parameterTypes": [
                    "java.lang.String"
                ]
            }
        ],
        "allDeclaredFields": true,
        "queryAllPublicConstructors": true
    },
    {
      "name": "java.util.concurrent.atomic.AtomicBoolean",
        "fields": [
            {
              "name": "value"
            }
        ]
    },
    {
      "name": "java.util.concurrent.atomic.AtomicReference",
        "fields": [
            {
              "name": "value"
            }
        ]
    },
    {
      "name": "javax.smartcardio.CardPermission"
    },
  {
    "name": "kotlin.SafePublicationLazyImpl",
        "fields": [
            {
              "name": "_value"
            }
        ]
    },
    {
      "name": "kotlin.reflect.jvm.internal.ReflectionFactoryImpl"
    },
  {
    "name": "kotlinx.coroutines.AwaitAll",
    "fields": [
      {
        "name": "notCompletedCount"
      }
    ]
  },
  {
    "name": "kotlinx.coroutines.AwaitAll$AwaitAllNode",
        "fields": [
            {
              "name": "_disposer"
            }
        ]
  },
  {
    "name": "kotlinx.coroutines.CancellableContinuationImpl",
    "fields": [
      {
        "name": "_decisionAndIndex"
      },
      {
        "name": "_parentHandle"
            },
            {
                "name": "_state"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.CancelledContinuation",
      "fields": [
        {
          "name": "_resumed"
        }
      ]
    },
  {
    "name": "kotlinx.coroutines.CompletedExceptionally",
    "fields": [
      {
        "name": "_handled"
      }
    ]
  },
  {
        "name": "kotlinx.coroutines.EventLoopImplBase",
        "fields": [
            {
                "name": "_delayed"
            },
          {
            "name": "_isCompleted"
          },
            {
              "name": "_queue"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.InvokeOnCancelling",
        "fields": [
            {
              "name": "_invoked"
            }
        ]
    },
    {
        "name": "kotlinx.coroutines.JobSupport",
        "fields": [
            {
              "name": "_parentHandle"
            },
          {
                "name": "_state"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.JobSupport$Finishing",
        "fields": [
            {
              "name": "_exceptionsHolder"
            },
          {
            "name": "_isCompleting"
          },
          {
            "name": "_rootCause"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.channels.BufferedChannel",
        "fields": [
            {
              "name": "_closeCause"
            },
          {
            "name": "bufferEnd"
          },
          {
            "name": "bufferEndSegment"
          },
          {
            "name": "closeHandler"
          },
          {
            "name": "completedExpandBuffersAndPauseFlag"
          },
          {
            "name": "receiveSegment"
          },
          {
            "name": "receivers"
          },
          {
            "name": "sendSegment"
          },
          {
            "name": "sendersAndCloseStatus"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.AtomicOp",
        "fields": [
            {
              "name": "_consensus"
            }
        ]
    },
    {
        "name": "kotlinx.coroutines.internal.ConcurrentLinkedListNode",
        "fields": [
            {
                "name": "_next"
            },
            {
                "name": "_prev"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.DispatchedContinuation",
      "fields": [
        {
          "name": "_reusableCancellableContinuation"
        }
      ]
    },
  {
    "name": "kotlinx.coroutines.internal.LimitedDispatcher",
    "fields": [
      {
        "name": "runningWorkers"
      }
    ]
  },
  {
        "name": "kotlinx.coroutines.internal.LockFreeLinkedListNode",
        "fields": [
            {
                "name": "_next"
            },
            {
                "name": "_prev"
            },
            {
                "name": "_removedRef"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.LockFreeTaskQueue",
        "fields": [
            {
              "name": "_cur"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.LockFreeTaskQueueCore",
        "fields": [
            {
              "name": "_next"
            },
          {
                "name": "_state"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.Segment",
        "fields": [
            {
              "name": "cleanedAndPointers"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.internal.ThreadSafeHeap",
        "fields": [
            {
              "name": "_size"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.scheduling.CoroutineScheduler",
        "fields": [
            {
              "name": "_isTerminated"
            },
          {
            "name": "controlState"
          },
          {
            "name": "parkedWorkersStack"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.scheduling.CoroutineScheduler$Worker",
        "fields": [
            {
              "name": "workerCtl"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.scheduling.WorkQueue",
        "fields": [
            {
              "name": "blockingTasksInBuffer"
            },
            {
              "name": "consumerIndex"
            },
            {
              "name": "lastScheduledTask"
            },
            {
              "name": "producerIndex"
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.sync.SemaphoreImpl",
        "fields": [
            {
              "name": "_availablePermits"
            },
          {
            "name": "deqIdx"
          },
          {
            "name": "enqIdx"
          },
          {
            "name": "head"
          },
          {
            "name": "tail"
            }
        ]
    },
    {
      "name": "org.jetbrains.gradle.awslambdaruntime.HelloWorld",
        "fields": [
            {
              "name": "Companion"
            }
        ]
    },
  {
    "name": "org.jetbrains.gradle.awslambdaruntime.HelloWorld$Companion",
    "methods": [
      {
        "name": "serializer",
        "parameterTypes": [
        ]
      }
    ]
  },
  {
    "name": "kotlin.internal.jdk8.JDK8PlatformImplementations",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
        ]
            }
        ]
    },
    {
      "name": "kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumberRefVolatile",
        "fields": [
            {
              "name": "sequenceNumber"
            }
        ]
    },
  {
    "name": "kotlinx.coroutines.channels.AbstractSendChannel",
    "fields": [
      {
        "name": "onCloseHandler"
            }
        ]
    }
]